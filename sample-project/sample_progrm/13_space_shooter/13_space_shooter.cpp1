//
// Program : This program demonstrates how to create a simple space shooter program
//
// ! Warning of Using this code:
//     You are allowed to re-use the code to your assignments and projects.
//     However it is limited only to code snippet.
//     Re-using the entire (or almost entire) of this code is strictly prohibited.
//     Assignments and Projects that violate  this requirement will be disqualified .
//
// jumail@utm.my
// 27 Nov 2018
//

#include <graphics.h>
using namespace std;

class SpaceShip;

class Bullet
{
  private:
	int x, y;
	int size;
	int color;
	int speed;
	bool active;
	SpaceShip *spaceShip;

	void drawHelper(int c) const
	{
		setcolor(c);
		setfillstyle(SOLID_FILL, c);
		fillellipse(x, y, size, size);
	}

  public:
	Bullet(int _x = 0, int _y = 0, int _size = 20, int _color = YELLOW, int _speed = 5) : x(_x), y(_y),
																						  size(_size), color(_color),
																						  speed(_speed),
																						  spaceShip(NULL),
																						  active(false)
	{
	}

	// int getX() const { return x; }
	int getY() const { return y; }
	bool getActive() const { return active; }
	// int getSize() const { return size; }
	// int getColor() const { return color; }
	// int getSpeed() const { return speed; }

	// void setX(int value) { x = value; }
	// void setY(int value) { y = value; }
	// void setXY(int _x, int _y){	x = _x; y = _y;	}

	// void setSize(int value) { size = value; }
	// void setColor(int value) { color = value; }
	// void setSpeed(int value) { speed = value; }
	void setSpaceShip(SpaceShip *s) { spaceShip = s; }

	void draw() const { drawHelper(color); }
	void undraw() const { drawHelper(0); }

	void move()
	{
		if (!active)
			return;
		undraw();
		y -= speed;

		if (y > 0)
			draw();
		else
			active = false;
	}

	void reset()
	{
		x = spaceShip->getX() + spaceShip->getWidth() / 2;
		y = spaceShip->getY() - size;
		active = true;
	}
};

#define MAXBULLET 10

class SpaceShip
{
  private:
	int x, y;
	int width, height;
	int color;

	Bullet bullets[MAXBULLET];

	void drawHelper(int c) const
	{
		setcolor(c);
		setfillstyle(SOLID_FILL, c);
		bar(x, y, x + width, y + height);
	}

  public:
	SpaceShip(int _x = 0, int _y = 0, int _width = 50, int _height = 100, int _color = BLUE, int _dx = 10) : x(_x), y(_y),
																											 width(_width), height(_height),
																											 color(_color)
	{
		for (int i = 0; i < MAXBULLET; i++)
			bullets[i].setSpaceShip(this);
	}

	// int getX() const { return x; }
	// int getY() const { return y; }
	// int getWidth() const { return width; }
	// int getHeight() const { return height; }
	// int getColor() const { return color; }
	// int getDx() const { return dx; }
	// Bullet* getBullet(int index) const { return bullets[index]; }
	// int getBulletCount() const { return nBullet; }

	// void setX(int value) { x = value; }
	// void setY(int value) { y = value; }
	// void setXY(int _x, int _y){	x = _x;	y = _y;	}
	// void setWidth(int value) { width = value; }
	// void setHeight(int value) { height = value; }
	// void setColor(int value) { color = value; }
	// void setDx(int value) { dx = value; }

	void shoot()
	{
		int foundAt = -1;
		for (int i = 0; i < MAXBULLET; i++)
		{
			if (!bullets[i].getActive())
			{
				foundAt = i;
				break;
			}
		}

		if (foundAt != -1)
			bullets[foundAt].reset();
	}

	void draw() const { drawHelper(color); }
	void undraw() const { drawHelper(0); }
	void move(int dx)
	{
		undraw();
		x += dx;
		draw();
	}

	void doAction()
	{
		for (int i=0; i<MAXBULLET; i++)
			bullets[i].move();
	}
};

int main()
{
	int screenWidth = getmaxwidth();
	int screenHeight = getmaxheight();
	initwindow(screenWidth, screenHeight, "Space Shooter");

	SpaceShip s1;
	char ch;

	s1.draw();

	while (true)
	{
		s1.doAction();

		if (kbhit())
		{
			ch = getch();

			if (ch == 27)
				break;
			else if (ch == ' ')
				s1.shoot();
			else if (ch == 0)
			{
				ch = getch();

				switch (ch)
				{
				case 75:
					s1.move(-10);
					break;

				case 80:
					s1.move(10);
					break;
				}
			}
		}
	}

	return 0;
}
